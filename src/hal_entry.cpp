#include <ws2812/ws2812.h>
#include "hal_data.h"
#include "debug/debug.h"
#include "timer/timer0.h"
#include "gxht30/gxht30.h"


extern "C" {
#include "dtmf/goertzel-dtmf.h"
}
#define SAMPLING_FREQUENCY 1000

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER
volatile bool scan_complete_flag = false;
volatile bool uart_send_complete_flag = false;
fsp_err_t err;
void debug(const char *fmt, ...);
/*******************************************************************************************************************//**
 * main() is generated by the RA Configuration editor and is used to generate threads if an RTOS is used.  This function
 * is called by main() when no RTOS is used.
 **********************************************************************************************************************/

void hal_entry(void) {
	ws2812_init();
	while(1){
		for(uint16_t i = 0;i<64;i++){
			ws2812_black();
			ws2812_set_color((i+0)%64, 255, 0, 0);
			ws2812_set_color((i+1)%64, 0, 255, 0);
			ws2812_set_color((i+2)%64, 0, 0, 255);
			ws2812_set_color((i+3)%64, 255, 0, 0);
			ws2812_set_color((i+4)%64, 0, 255, 0);
			ws2812_set_color((i+5)%64, 0, 0, 255);

			ws2812_send_sync();
			R_BSP_SoftwareDelay(8, BSP_DELAY_UNITS_MILLISECONDS);
		}
	}

	debug_init();
	timer0_init();
	debug("%s", "legend-tech");

    err = RM_TINCYRYPT_PORT_Init();


	while(1){
		R_BSP_SoftwareDelay(1000, BSP_DELAY_UNITS_MILLISECONDS);
		uint8_t my_rand;
		err = RM_TINCYRYPT_PORT_TRNG_Read(&my_rand, 1);
		debug("%d",my_rand);
	}



	while(1){};



	gxht30_init();
	R_BSP_SoftwareDelay(20, BSP_DELAY_UNITS_MILLISECONDS);
	gxht30_result result;
	if(gxht30_read(&result)){
		debug("%d\n", result.temperature);
	}


	while(1);






	/* rtc_time_t is an alias for the C Standard time.h struct 'tm' */
	rtc_time_t set_time;
	rtc_time_t get_time;

	long long int a =1650631454;
	gmtime_r(&a,&set_time);

	/* Initialize the RTC module */
	err = R_RTC_Open(&g_rtc0_ctrl, &g_rtc0_cfg);
	/* Handle any errors. This function should be defined by the user. */
	assert(FSP_SUCCESS == err);


	/* Set the calendar time */
	R_RTC_CalendarTimeSet(&g_rtc0_ctrl, &set_time);
	/* Get the calendar time */


	R_BSP_SoftwareDelay(2000, BSP_DELAY_UNITS_MILLISECONDS);
	R_RTC_CalendarTimeGet(&g_rtc0_ctrl, &get_time);
	R_BSP_SoftwareDelay(1000, BSP_DELAY_UNITS_MILLISECONDS);
	debug("tm_mday%d\n",get_time.tm_mday);
	debug("tm_mon%d\n",get_time.tm_mon);
	debug("tm_year%d\n",get_time.tm_year);
	debug("tm_hour%d\n",get_time.tm_hour);
	debug("tm_min%d\n",get_time.tm_min);
	debug("tm_sec%d\n",get_time.tm_sec);
	debug("tm_wday%d\n",get_time.tm_wday);
	debug("tm_yday%d\n",get_time.tm_yday);







	while (1)
		;
///////////////
	err = R_ADC_Open(&g_adc0_ctrl, &g_adc0_cfg);
	err = R_ADC_ScanCfg(&g_adc0_ctrl, &g_adc0_channel_cfg);
	uint16_t adc_data1 = 0;

	while (1) {
		/* Enable scan triggering from ELC events. */
		scan_complete_flag = false;

		(void) R_ADC_ScanStart(&g_adc0_ctrl);
		while (!scan_complete_flag) {
			/* Wait for callback to set flag. */
		}
		err = R_ADC_Read(&g_adc0_ctrl, ADC_CHANNEL_19, &adc_data1);
		assert(FSP_SUCCESS == err);
		debug("%d\n", adc_data1);
//		R_BSP_SoftwareDelay(0, BSP_DELAY_UNITS_MILLISECONDS);

	}

	while (1)
		;

#if BSP_TZ_SECURE_BUILD
    /* Enter non-secure code */
    R_BSP_NonSecureEnter();
#endif
}


void adc_callback(adc_callback_args_t *p_args) {

	FSP_PARAMETER_NOT_USED(p_args);

	scan_complete_flag = true;
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event) {
	if (BSP_WARM_START_RESET == event) {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

		/* Enable reading from data flash. */
		R_FACI_LP->DFLCTL = 1U;

		/* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
		 * C runtime initialization, should negate the need for a delay since the initialization will typically take more than 6us. */
#endif
	}

	if (BSP_WARM_START_POST_C == event) {
		/* C runtime environment and system clocks are setup. */

		/* Configure pins. */
		R_IOPORT_Open(&g_ioport_ctrl, g_ioport.p_cfg);
	}
}

#if BSP_TZ_SECURE_BUILD

BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ();

/* Trustzone Secure Projects require at least one nonsecure callable function in order to build (Remove this if it is not required to build). */
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ()
{

}
#endif
