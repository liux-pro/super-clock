#include <ws2812/ws2812.h>
#include "hal_data.h"
#include "stdio.h"
#include <stdarg.h>
extern "C" {
#include "dtmf/goertzel-dtmf.h"
}
#define SAMPLING_FREQUENCY 1000

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER
volatile bool scan_complete_flag = false;
volatile bool uart_send_complete_flag = false;
fsp_err_t err;
void debug(const char *fmt, ...);
/*******************************************************************************************************************//**
 * main() is generated by the RA Configuration editor and is used to generate threads if an RTOS is used.  This function
 * is called by main() when no RTOS is used.
 **********************************************************************************************************************/

void hal_entry(void) {
	/* TODO: add your own code here */
//	ws2812_init();
//	ws2812_black();
//	ws2812_set_color(3, 0, 255, 0);
//	ws2812_set_color(5, 0, 0, 0);
//	ws2812_send();
//	R_BSP_SoftwareDelay(500, BSP_DELAY_UNITS_MILLISECONDS);
//
//	for (uint8_t i = 0; i < 8; i++) {
//		ws2812_black();
//		ws2812_set_color(i, 0, 255, 0);
//		ws2812_send_sync();
//		R_BSP_SoftwareDelay(16, BSP_DELAY_UNITS_MILLISECONDS);
//	}
//	for (uint8_t i = 8; i > 0; i--) {
//		ws2812_black();
//		ws2812_set_color(i - 1, 255, 0, 0);
//		ws2812_send_sync();
//		R_BSP_SoftwareDelay(16, BSP_DELAY_UNITS_MILLISECONDS);
//	}
	err = R_SCI_UART_Open(&g_uart0_ctrl, &g_uart0_cfg);
	assert(FSP_SUCCESS == err);
	debug("%s", "legend-tech");
	R_BSP_SoftwareDelay(20, BSP_DELAY_UNITS_MILLISECONDS);

	/* Initializes the module. */
	err = R_GPT_Open(&g_timer0_ctrl, &g_timer0_cfg);
	/* Handle any errors. This function should be defined by the user. */
	assert(FSP_SUCCESS == err);
	/* Start the timer. */
	(void) R_GPT_Start(&g_timer0_ctrl);

	while (1)
		;
///////////////
	err = R_ADC_Open(&g_adc0_ctrl, &g_adc0_cfg);
	err = R_ADC_ScanCfg(&g_adc0_ctrl, &g_adc0_channel_cfg);
	uint16_t adc_data1 = 0;

	while (1) {
		/* Enable scan triggering from ELC events. */
		scan_complete_flag = false;

		(void) R_ADC_ScanStart(&g_adc0_ctrl);
		while (!scan_complete_flag) {
			/* Wait for callback to set flag. */
		}
		err = R_ADC_Read(&g_adc0_ctrl, ADC_CHANNEL_19, &adc_data1);
		assert(FSP_SUCCESS == err);
		debug("%d\n", adc_data1);
//		R_BSP_SoftwareDelay(0, BSP_DELAY_UNITS_MILLISECONDS);

	}

	while (1)
		;

#if BSP_TZ_SECURE_BUILD
    /* Enter non-secure code */
    R_BSP_NonSecureEnter();
#endif
}

void timer0_callback(timer_callback_args_t *p_args) {
	if (TIMER_EVENT_CYCLE_END == p_args->event) {
		debug("aaa\n");
	}

}

void debug(const char *fmt, ...) {
	//参考https://www.ibm.com/docs/en/zos/2.1.0?topic=functions-vsprintf-format-print-data-buffer
	va_list arg_ptr;
	va_start(arg_ptr, fmt);
	static unsigned char send_buff[100];
	uart_send_complete_flag = false;
	vsprintf((char*) send_buff, fmt, arg_ptr);
	uint8_t len = strlen((char*) send_buff);
	err = R_SCI_UART_Write(&g_uart0_ctrl, send_buff, len);
	va_end(arg_ptr);
}

void user_uart_callback(uart_callback_args_t *p_args) {
	if (p_args->event == UART_EVENT_TX_COMPLETE) {
		uart_send_complete_flag = true;
	}
}

void adc_callback(adc_callback_args_t *p_args) {

	FSP_PARAMETER_NOT_USED(p_args);

	scan_complete_flag = true;
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event) {
	if (BSP_WARM_START_RESET == event) {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

		/* Enable reading from data flash. */
		R_FACI_LP->DFLCTL = 1U;

		/* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
		 * C runtime initialization, should negate the need for a delay since the initialization will typically take more than 6us. */
#endif
	}

	if (BSP_WARM_START_POST_C == event) {
		/* C runtime environment and system clocks are setup. */

		/* Configure pins. */
		R_IOPORT_Open(&g_ioport_ctrl, g_ioport.p_cfg);
	}
}

#if BSP_TZ_SECURE_BUILD

BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ();

/* Trustzone Secure Projects require at least one nonsecure callable function in order to build (Remove this if it is not required to build). */
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ()
{

}
#endif
